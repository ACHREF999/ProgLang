statements      : NEWLINE* expr (NEWLINE + expr)* NEWLINE*

expr   : KEYWORD:let IDENTIFIER EQ expr
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr       : NOT comp-expr
                            : arith-expr ((EE|LT|GT|LTE|GTE)arith-expr)*

 arith-expr           :   term( (PLUS|MINUS) term )*      *==0+

term   :    factor ( (MUL|DIV) factor )*
            :   power

factor   :   (PLUS|MINUS) factor

power   : call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)* )? RPAREN)?

atom      :    INT|FLOAT|STRING|IDENTIFIER
                :   LPR expr RPR
                :   list-expr
                :   if-expr
                :   for-expr
                :   while-expr
                ;   func-def

list-expr        :   LSQUARE  (expr (COMMA expr)* )? RSQUARE



if-expr            :  KEYWORD:IF expr KEYWORD:THEN
                            ( expr elif-expr|else-expr?) |
                            ( NEWLINE statements KEYWORD:END| elif-expr | else-expr )

elif-expr       :   KEYWORD:ELIF expr KEYWORD:THEN
                            ( expr elif-expr | else-expr?)
                          |  ( NEWLINE statements KEYWORD:END | elif-expr | else-expr )

else-expr   :     KEYWORD:ELSE
                            expr
                           | (NEWLINE statements KEYWORD:END)


for-expr        : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                         (KEYWORD:STEP expr)? KEYWORD:THEN
                         expr
                         | (NEWLINE statements KEYWORD:END)


while-expr      : KEYWORD:WHILE expr KEYWORD:THEN
                             expr
                            | (NEWLINE statements KEYWORD:END)



func-def    :   KEYWORD:FUNC IDENTIFIER?
                        LPAREN (IDENTIFIER(COMMA IDENTIFIER)*)? RPAREN
                        (ARROW expr )
                        | (NEWLINE statements KEYWORD:END)

